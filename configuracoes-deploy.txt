1 -  Criação de uma pasta com nome setting

----------------------------------------------------------------------------

2 - Renomear o arquivo settings para base.py e enviar para a pasta settings
	|
	|
	"""
	Django settings for blog project.

	Generated by 'django-admin startproject' using Django 3.2.4.

	For more information on this file, see
	https://docs.djangoproject.com/en/3.2/topics/settings/

	For the full list of settings and their values, see
	https://docs.djangoproject.com/en/3.2/ref/settings/
	"""

	from pathlib import Path
	import os
	import dj_database_url
	import whitenoise

	# Build paths inside the project like this: BASE_DIR / 'subdir'.
	BASE_DIR = Path(__file__).resolve().parent.parent.parent


	# Quick-start development settings - unsuitable for production
	# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

	# SECURITY WARNING: keep the secret key used in production secret!
	SECRET_KEY = 'django-insecure-vf$fc#kv9z6up99_m+9)4o#e0t3$@c^+%%suq6^ngak4zkyz%@'

	# SECURITY WARNING: don't run with debug turned on in production!
	DEBUG = True

	ALLOWED_HOSTS = ['*']


	# Application definition

	INSTALLED_APPS = [
	    'posts',
	    'categoria',
	    'comentarios',
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'django.contrib.humanize',
	]

	MIDDLEWARE = [
	    'django.middleware.security.SecurityMiddleware',
	    'whitenoise.middleware.WhiteNoiseMiddleware',
	    'django.contrib.sessions.middleware.SessionMiddleware',
	    'django.middleware.common.CommonMiddleware',
	    'django.middleware.csrf.CsrfViewMiddleware',
	    'django.contrib.auth.middleware.AuthenticationMiddleware',
	    'django.contrib.messages.middleware.MessageMiddleware',
	    'django.middleware.clickjacking.XFrameOptionsMiddleware',
	]

	ROOT_URLCONF = 'blog.urls'

	TEMPLATES = [
	    {
	        'BACKEND': 'django.template.backends.django.DjangoTemplates',
	        'DIRS': [os.path.join(BASE_DIR, 'templates')],
	        'APP_DIRS': True,
	        'OPTIONS': {
	            'context_processors': [
	                'django.template.context_processors.debug',
	                'django.template.context_processors.request',
	                'django.contrib.auth.context_processors.auth',
	                'django.contrib.messages.context_processors.messages',
	            ],
	        },
	    },
	]

	WSGI_APPLICATION = 'blog.wsgi.application'


	# Database
	# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

	DATABASES = {
	    'default': {
	        'ENGINE': 'django.db.backends.sqlite3',
	        'NAME': BASE_DIR / "db.sqlite3",
	    }
	}

	prod_db = dj_database_url.config(conn_max_age=500)
	DATABASES['default'].update(prod_db)

	# Password validation
	# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

	AUTH_PASSWORD_VALIDATORS = [
	    {
	        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	    },
	]


	# Internationalization
	# https://docs.djangoproject.com/en/3.2/topics/i18n/

	LANGUAGE_CODE = 'pt-BR'

	TIME_ZONE = 'America/Sao_Paulo'

	USE_I18N = True

	USE_L10N = True

	USE_TZ = True


	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/3.2/howto/static-files/

	STATIC_URL = '/static/'
	STATICFILES_DIRS = (os.path.join(BASE_DIR, 'templates/static'),)
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')

	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
	MEDIA_URL = '/media/'



	from django.contrib.messages import constants

	MESSAGE_TAGS = {
	    constants.ERROR: 'alert-danger',
	    constants.WARNING: 'alert-warning',
	    constants.DEBUG: 'alert-info',
	    constants.SUCCESS: 'alert-success',
	    constants.INFO: 'alert-info',
	}

	INSTALLED_APPS += ('django_summernote',)
	X_FRAME_OPTIONS = "SAMEORIGIN"

	SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
	SECURE_SSL_REDIRECT = True
	SESSION_COOKIE_SECURE = True
	CSRF_COOKIE_SECURE = True
	STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

	# Default primary key field type
	# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


----------------------------------------------------------------------------




3 - Criar um arquivo com nome heroku.py na pasta settings
	|
	import environ

	from blog.settings.base import *

	env = environ.Env()

	DEBUG = env.bool("DEBUG", False)

	SECRET_KEY = env("SECRET_KEY")

	ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

	DATABASES = {
	    "default": env.db(),
	}

----------------------------------------------------------------------------

4 - Configurar o wsgi.py

	import os

	from django.core.wsgi import get_wsgi_application

	os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog.settings.base')

	application = get_wsgi_application()


5 - Configurar o asgi.py

	import os

	from django.core.asgi import get_asgi_application

	os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog.settings.base')

	application = get_asgi_application()


6 - Criar o arquivo Procfile no diretório proncipal

	release: python3 manage.py migrate
	web: gunicorn blog.wsgi 

7 - Criar o arquivo runtime.txt
	
	python-3.8.6


8 - Comandos cli do heroku terminal:

	git remote 
	
	git add .
	
	git commit -m "texto"
	
	heroku login
	
	heroku create

	heroku git:remote -a cryptic-badlands-71674

	# Configurar e setar as variáveis  do arquivo heroku.py
	heroku config:set ALLOWED_HOSTS=young-retreat-65751.heroku.com

	heroku config:set DJANGO_SETTINGS_MODULE=blog.settings.heroku

	heroku config:set SECRET_KEY=<chave secreta>
	#JoiAf6aMBSnakLmKpGVTfbEl6kD25PKn
	heroku config:set DEBUG=False

	# Criando banco de dados postgresql

	heroku addons:create heroku-postgresql:hobby-dev

	git push heroku master

	heroku open

	heroku run python3 manage.py createsuperuser

	ou 

	heroku run bash


	 1255  git init 
 1256  echo "BLOG" >> README.md
 1257  git add .
 1258  git branch -M main
 1259  git commit -m "frist"
 1260  git remote add origin https://github.com/juvenalculino/blog-django.git
 1261  git push 
 1262  git push --set-upstream origin main